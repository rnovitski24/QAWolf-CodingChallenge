/**
 * BRAINSTORMING IDEAS
 * 
 * NOTES ON HACKERNEWS POSTS:
 * - Page shows 30 results at a time
 * - Each entry is formatted as follows:
 *  - Top line: [Entry #] [Entry Title] ([Website URL])
 *  - Bottom line: [#] point(s) by [Poster Username] [# hours/minutes] ago
 * - Looks like each post has exact time posted in metadata under 'span.age'
 * - Easiest way to handle is probably to iterate through top 100 articles and
 *    comparing each entry's metadata post time with the previous.  Should only 
 *    need to remember last entry's time since they should all be chronological
 * - Can only do 30 entries at a time so that must be included in implementation of loop
 * - Traverse to next 30 entries via getByRole 'More' link
 *    
 * WAYS TO IMPROVE:
 * - Main question output options:
 *    - 1. No site output(simple T/F)
 *    - 2. Console read-only output(console.log())
 *    - 3. Write/save a file containing specified links
 * - Create a dynamic UI:
 *    - 1. Allows any specified number of articles to be used(with a set maximum of 999)
 *      - Trivial implementation once base UI complete
 *    - 2. Can choose a specific date to go back to  *** FIRST DAY OF POSTED ARTICLES === 2/19/2007!!! ***
 *      - NOTE: No longer perfectly chronological; ranking algorithm 'divides points by a power of the time since story was submitted'
 *      - I can do this 1 of 2 ways:
 *        - 1. Manually click through https://news.ycombinator.com/front links until correct date specified( awful, inconsistent worst case time complexity )
 *        - 2. Change URL to specified date(format is "...com/front?day=YYYY-MM-DD")
 *    - 3. Adjusts UTC time to whatever zone local machine is set to
 *        - Most likely trivial, need to look into JS handling of this
 *          - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date
 *            - I believe correct object should be Date.getTimezoneOffset() (returns difference bet. current timezone and UTC in mins)
 *    - 4. MAYBE can sort by either newest->oldest OR number of points
 *      - This one is a maybe, have to see how badly it would affect time complexity
 *      - If full sort is unreasonable, can always passively keep track of entry with highest points
 */